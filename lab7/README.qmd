---
title: "Анализ данных сетевого трафика с помощью Apache Arrow"
author: "pashtet.2003@yandex.ru"
format: 
  md:
    output-file: README.md
---

# Использование Apache Arrow для анализа сетевого трафика

## Цель работы

1. Освоить применение технологии **Apache Arrow** для работы с большими данными.
2. Научиться использовать **R** и библиотеку **Arrow** для обработки и анализа данных.
3. Выполнить анализ метаданных сетевого трафика.
4. Закрепить навыки работы с облачными технологиями, такими как Yandex Object Storage и RStudio Server.
5. Изучить возможности оптимизации кода для работы с большими данными в формате `.parquet`.

---

## Исходные данные

1. Операционная система: Windows 10 или Ubuntu 20.04.
2. Инструменты: **RStudio Desktop**, библиотека `arrow`, и облачная IDE RStudio Server.
3. Данные: набор сетевого трафика в формате `.parquet` (пример: `traffic_data.parquet`).

---

## Задание

С использованием языка R, библиотеки `arrow` и облачной IDE RStudio Server выполнить следующие задачи:

1. Обнаружить утечку данных.
2. Выявить IP-адреса с ненормальной активностью в нерабочие часы.
3. Найти хосты, использующие нестандартные порты для передачи данных.

---

## Ход работы

### 1. Импорт данных

Загружаем необходимые библиотеки и данные в формате Parquet:

```{r}
library(arrow)
library(tidyverse)
library(lubridate)

# Загрузка данных
traffic_data <- read_parquet("tm_data.pqt", use_threads = FALSE)

# Просмотр структуры данных
print(glimpse(traffic_data))
```

---

### 2. Задание 1. Обнаружение утечки данных

Определяем IP-адрес хоста, пересылающего наибольшее количество данных на внешние ресурсы, исключая локальные адреса:

```{r}
outside_traffic <- traffic_data %>%
  filter(
    str_detect(src, "^12.|^13.|^14.") & !str_detect(dst, "^12.|^13.|^14.")
  ) %>%
  group_by(src) %>%
  summarise(total_bytes = sum(bytes), .groups = "drop") %>%
  arrange(desc(total_bytes)) %>%
  filter(total_bytes > 6e9)

print(outside_traffic)
```

---

### 3. Задание 2. Ненормальная активность в нерабочие часы

Определяем IP-адреса систем с повышенной активностью в ночное время (00:00–06:00), исключая ранее найденного нарушителя:

```{r}
# Добавляем колонку с временной меткой и часами
traffic_data <- traffic_data %>%
  mutate(
    timestamp = as_datetime(timestamp / 1000),
    hour = hour(timestamp)
  )

night_activity <- traffic_data %>%
  filter(
    hour >= 0 & hour < 6,
    str_detect(src, "^12.|^13.|^14.") & !str_detect(dst, "^12.|^13.|^14.")
  ) %>%
  group_by(src) %>%
  summarise(total_bytes = sum(bytes), .groups = "drop") %>%
  arrange(desc(total_bytes))

print(night_activity)
```

---

### 4. Задание 3. Использование нестандартного порта для утечки данных

Выявляем IP-адреса, использующие нестандартные порты для передачи данных:

```{r}
# Анализ использования портов
port_analysis <- traffic_data %>%
  filter(
    str_detect(src, "^12.|^13.|^14.") & !str_detect(dst, "^12.|^13.|^14.")
  ) %>%
  group_by(port) %>%
  summarise(
    total_bytes = sum(bytes),
    avg_bytes = mean(bytes),
    max_bytes = max(bytes),
    .groups = "drop"
  ) %>%
  arrange(desc(total_bytes))

print(port_analysis)

# Определение IP-адресов с подозрительным портом (например, порт 37)
suspicious_ips <- traffic_data %>%
  filter(port == 37) %>%
  group_by(src) %>%
  summarise(total_bytes = sum(bytes), .groups = "drop") %>%
  arrange(desc(total_bytes))

print(suspicious_ips)
```

---

## Оценка результата

1. Были успешно выполнены задачи по анализу сетевого трафика с использованием библиотеки `arrow`.
2. Определены IP-адреса, связанные с утечкой данных, повышенной активностью в ночное время и использованием нестандартных портов.
3. Оптимизированы методы работы с большими данными, такие как агрегация и фильтрация.

---

## Вывод

Применение технологии **Apache Arrow** и языка R позволило эффективно проанализировать большой набор данных сетевого трафика. Использование формата Parquet совместно с библиотекой Arrow обеспечило высокую производительность и удобство обработки данных. Выявленные IP-адреса дают возможность более детально изучить потенциальные инциденты безопасности.
