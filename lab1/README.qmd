```{r}
chooseCRANmirror(graphics = FALSE, ind = 1)
```
---
title: "Работа с языком программирования R"
author: "pashtet.2003@yandex.ru"
format: 
  md:
    output-file: README.md
---

# Введение в R

## Цель работы

1. Развить практические навыки использования языка программирования R для обработки данных.
2. Развить навыки работы в RStudio IDE: установка пакетов, работа с проектами в RStudio, настройка и работа с Git.
3. Закрепить знания базовых типов данных языка R и простейших операций с ними.

## Исходные данные

1. Программное обеспечение: Windows 10
2. RStudio Desktop
3. Интерпретатор языка R версии 4.1.1

## План

Используя программный пакет `swirl`, освоить базовые операции в языке программирования R.

## Шаги

### 1. Установка программного пакета swirl

Для начала работы нужно установить пакет `swirl`:

```{r}
install.packages("swirl")
```

### 2. Запуск задания с помощью `swirl::swirl()`

После установки пакета, можно запустить задание для обучения:

```{r}
swirl::swirl()
```

### 3. Выполнение базовых операций с числами и переменными

Выполняем простые операции:

```{r}
5 + 7
```

Создаем переменную `x` и присваиваем ей результат вычисления:

``{r}
x <- 5 + 7
```

Проверим значение переменной `x`:

```{r}
x
```

Создаем новую переменную `y`:

```{r}
y <- x - 3
```

И выводим её значение:

~~~{r}
y
~~~

Создадим вектор `z`:

```{r}
z <- c(1.1, 9, 3.14)
```

Получаем справку о функции `c`:

```{r}
?c
```

Проверим значения вектора `z`:

```{r}
z
```

Выполним математические операции с вектором:

```{r}
z * 2 + 100
```

Создадим новый вектор `my_sqrt`, вычислив квадратный корень:

```{r}
my_sqrt <- sqrt(z - 1)
```

Посмотрим на результат:

```{r}
my_sqrt
```

Выполним деление:

```{r}
my_div <- z / my_sqrt
```

Посмотрим результат деления:

```{r}
my_div
```

### 4. Работы с рабочим пространством и файлами

Получим текущую рабочую директорию:

```{r}
getwd()
```

Просмотрим список объектов в рабочем пространстве:

```{r}
ls()
```

Создадим переменную `x` и проверим изменения:

```{r}
x <- 9
ls()
```

Посмотрим список файлов в текущей директории:

```{r}
dir()
```

Получим информацию о функции `list.files`:

```{r}
?list.files
```

Проверим аргументы функции `list.files`:

```{r}
args(list.files)
```

Создадим и используем новую директорию:

```{r}
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
```

Создадим новый файл:

```{r}
file.create("mytest.R")
list.files()
```

Проверим существование файла:

```{r}
file.exists("mytest.R")
```

Посмотрим информацию о файле:

```{r}
file.info("mytest.R")
```

Переименуем файл:

```{r}
file.rename("mytest.R", "mytest2.R")
```

Скопируем файл:

```{r}
file.copy("mytest2.R", "mytest3.R")
```

Используем функцию `file.path`:

```{r}
file.path("mytest3.R")
```

Создадим вложенные директории:

```{r}
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
```

Возвращаемся в старую директорию:

```{r}
setwd(old.dir)
```

### 5. Работа с последовательностями чисел

Создадим последовательность от 1 до 20:

```{r}
1:20
```

Последовательность с шагом 1:

```{r}
pi:10
```

Последовательность от 15 до 1:

```{r}
15:1
```

Используем функцию `seq`:

```{r}
seq(1, 20)
```

Создадим последовательность с шагом 0.5:

```{r}
seq(0, 10, by=0.5)
```

Создадим последовательность с 30 элементами:

```{r}
my_seq <- seq(5, 10, length=30)
```

Проверим длину последовательности:

```{r}
length(my_seq)
```

Создадим последовательность, используя индекс:

```{r}
seq_along(my_seq)
```

Повторим элементы:

```{r}
rep(0, times = 40)
```

### 6. Работа с векторами

Создадим вектор с числами:

```{r}
num_vect <- c(0.5, 55, -10, 6)
```

Проверим, какие элементы меньше 1:

```{r}
num_vect < 1
```

Создадим логический вектор:

```{r}
tf <- num_vect < 1
tf
```

Создадим строковый вектор:

```{r}
my_char <- c("My", "name", "is")
my_char
```

Объединим строки:

```{r}
paste(my_char, collapse = " ")
```

Добавим новое имя:

```{r}
my_name <- c(my_char, "your_name_here")
paste(my_name, collapse = " ")
```

### 7. Работа с пропущенными значениями

Создадим вектор с пропущенными значениями:

```{r}
x <- c(44, NA, 5, NA)
x * 3
```

Создадим выборку с пропущенными значениями:

```{r}
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
```

Проверим наличие пропущенных значений:

```{r}
my_na <- is.na(my_data)
sum(my_na)
```

Проверим результат:

```{r}
my_data
```

Посмотрим на ошибку деления на ноль:

```{r}
0 / 0
```

И на результат операции `Inf - Inf`:

```{r}
Inf - Inf
```

## Вывод

В ходе выполнения работы я развил практические навыки использования языка программирования R для обработки данных, освоил работу с RStudio IDE и базовыми операциями в языке R с помощью пакета `swirl`.
